#!/bin/sh
# Start gitserver:
SERVICE="unicorn.rb"



gitserver_start() {
source /etc/profile
if [ -x /usr/bin/unicorn_rails ]; then
if ps ax | grep -v grep | grep $SERVICE > /dev/null
  then
    echo "$SERVICE is already running!"
  else
echo "Starting $SERVICE..."
fi

   # If there is an old PID file (no unicorn running), clean it up:
      if [ -r /srv/httpd/application/tmp/pids/unicorn.pid ]; then
      if ! ps axc | grep unicorn 1> /dev/null 2> /dev/null ; then
      echo "Cleaning up old /srv/httpd/tmp/pids/unicorn.pid."
       rm -f /srv/httpd/application/tmp/pids/unicorn.pid
       fi
      fi
        cd /srv/httpd/application/
		unicorn_rails -c /srv/httpd/configuration/unicorn.rb -D
    		count=`cat /etc/httpd/httpd.conf | grep -c "Include /srv/httpd/configuration/apache.conf"`
		 if [ "$count" -eq "0"   ]; then
		echo Include /srv/httpd/configuration/apache.conf >> /etc/httpd/httpd.conf
		 fi
		 /etc/rc.d/rc.nginx start
fi
   }
gitserver_stop() {
    # If there is no PID file, ignore this request...
  if [ -r /srv/httpd/application/tmp/pids/unicorn.pid ]; then
    killall unicorn_rails
      # Wait at least one minute for it to exit..
      for second in 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 60 ; do
   if [ ! -r /srv/httpd/application/tmp/pids/unicorn.pid ]; then
              break;
     fi
      sleep 1
         done
       if [ "$second" = "60" ]; then
 echo "WARNING:  Gave up waiting for Gitserver to exit!"
            sleep 15
            fi
      fi
}

# Restart gitserver:
       gitserver_restart() {
       gitserver_stop
gitserver_start
 }
case "$1" in
	'start')
	  gitserver_start
	    ;;
	    'stop')
	      gitserver_stop
	        ;;
		'restart')
		  gitserver_restart
		    ;;
		    *)
		      echo "usage $0 start|stop|restart"
	      esac
